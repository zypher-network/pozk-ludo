// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const { ethers, upgrades, network } = require("hardhat");

// opbnbtestnet
const ADDR = "0x0eaca2011742c5156f217f1b1d0784fe5fbf2428";

async function testVerify() {
  const C = await ethers.getContractFactory("Game2048Step60CircomVerifier");
  const c = await C.attach(ADDR);

  const res = await c.verify(
    "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000200800000000000000000000000000000000000000000000000000000088600444000050002300000000000000000000000000000000003c0cf3cc8f230c8f0cf3ff0ef3c3330000000000000000000000000000000000000000000000000000000000001a850000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000001c80000000000000000000000000000000000000000000000000000200800000000000000000000000000000000000000000000000000000088600444000050002300000000000000000000000000000000003c0cf3cc8f230c8f0cf3ff0ef3c3330000000000000000000000000000000000000000000000000000000000001a850000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000001c8",
    "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002245328eca4166f23a16d9cbfb401b94cd5c18637592c6b03f93a6085a025e29421bae53ff926f8e5d0d6d0cad2b8b02c8974d7780a6cb3b72bde92db48c96e5b2b84b3b91cb7663e49b872887d44bbeccc6842b0377d9515d3ec327d81a3f6b310ac2dfdc7356148f2392f6d0595786522f36371872569cd99bf4c889afa0041240c2dba7ebfc59e4618c1f92ed4fd19b0d62b26514ee52bcde296f1cd41c05b0eaf366b53d5d17087c56db0ea5ae501b63deb2e56ef23cc57fc367d5c4618292d14ec991d5223d1c7dd9f6551c223e575a1c179e6b72902bef260669135b4262920db933e7c36ded75bc72cc3213def73546db02366ef0adaf6c047a90005a62ad3672cca87ef2f760d8c21c1e5927550386c6077b1d04ba8a9939cb1c98aca0c2b77a766e72dff48c9dc35dc5f8c2a891656e65c9d762362fc160ca4942e1105a3aac14877ab83a478ebc973a55805c3ddbe288ae7fe908b7e0d2378f5e84f0cbd70aec089310c111b6b7e0f628012cf4e754b85e3fa754df12637ce9971fe05a2d54342b86331fde7213379db5431a8c29f37b457da0db493eada3b183ea11eacb93637a7345ea5fd56c75f8eddcce0553384410b06eca97f3434a1b89d4c0c9b2090d8124850c6cda0d4af29baa6a8b29978ae69d6f8969e3a5536ef250e031e0eca90d1c6b8f5c2f3028ce2335bc30d051f0d95eb52d89b41c4a0b45875"
  );
  console.log(`Verify: ${res}`);
}

async function main() {
  await testVerify();
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
